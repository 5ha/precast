//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* eslint-disable */
// ReSharper disable InconsistentNaming

export class ApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    csv(): Promise<void> {
        let url_ = this.baseUrl + "/api/ConcreteReport/csv";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCsv(_response);
        });
    }

    protected processCsv(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    concreteReport(): Promise<void> {
        let url_ = this.baseUrl + "/api/ConcreteReport";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processConcreteReport(_response);
        });
    }

    protected processConcreteReport(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param endDate (optional) 
     * @return OK
     */
    testQueue(endDate: Date | undefined): Promise<TestCylinderQueueResponse[]> {
        let url_ = this.baseUrl + "/api/tester-report/test-queue?";
        if (endDate === null)
            throw new globalThis.Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTestQueue(_response);
        });
    }

    protected processTestQueue(response: Response): Promise<TestCylinderQueueResponse[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TestCylinderQueueResponse.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return result200;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TestCylinderQueueResponse[]>(null as any);
    }

    /**
     * @param daysBack (optional) 
     * @return OK
     */
    untestedPlacements(daysBack: number | undefined): Promise<UntestedPlacementResponse[]> {
        let url_ = this.baseUrl + "/api/tester-report/untested-placements?";
        if (daysBack === null)
            throw new globalThis.Error("The parameter 'daysBack' cannot be null.");
        else if (daysBack !== undefined)
            url_ += "daysBack=" + encodeURIComponent("" + daysBack) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUntestedPlacements(_response);
        });
    }

    protected processUntestedPlacements(response: Response): Promise<UntestedPlacementResponse[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UntestedPlacementResponse.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return result200;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UntestedPlacementResponse[]>(null as any);
    }

    /**
     * @return OK
     */
    testSetDayGET(testSetDayId: number): Promise<GetTestSetDayDetailsResponse> {
        let url_ = this.baseUrl + "/api/tester-report/test-set-day/{testSetDayId}";
        if (testSetDayId === undefined || testSetDayId === null)
            throw new globalThis.Error("The parameter 'testSetDayId' must be defined.");
        url_ = url_.replace("{testSetDayId}", encodeURIComponent("" + testSetDayId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTestSetDayGET(_response);
        });
    }

    protected processTestSetDayGET(response: Response): Promise<GetTestSetDayDetailsResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetTestSetDayDetailsResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetTestSetDayDetailsResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    testSetDayPOST(body: SaveTestSetDayDataRequest | undefined): Promise<TestCylinderQueueResponse> {
        let url_ = this.baseUrl + "/api/tester-report/test-set-day";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTestSetDayPOST(_response);
        });
    }

    protected processTestSetDayPOST(response: Response): Promise<TestCylinderQueueResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TestCylinderQueueResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TestCylinderQueueResponse>(null as any);
    }
}

export class GetTestSetDayDetailsResponse implements IGetTestSetDayDetailsResponse {
    testSetDayId?: number;
    dayNum?: number;
    comments?: string | undefined;
    dateDue?: Date;
    dateTested?: Date | undefined;
    jobCode?: string | undefined;
    jobName?: string | undefined;
    mixDesignCode?: string | undefined;
    requiredPsi?: number;
    pieceType?: string | undefined;
    castDate?: Date;
    castTime?: string | undefined;
    testCylinders?: TestCylinderBreakDto[] | undefined;

    constructor(data?: IGetTestSetDayDetailsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.testSetDayId = _data["testSetDayId"];
            this.dayNum = _data["dayNum"];
            this.comments = _data["comments"];
            this.dateDue = _data["dateDue"] ? new Date(_data["dateDue"].toString()) : undefined as any;
            this.dateTested = _data["dateTested"] ? new Date(_data["dateTested"].toString()) : undefined as any;
            this.jobCode = _data["jobCode"];
            this.jobName = _data["jobName"];
            this.mixDesignCode = _data["mixDesignCode"];
            this.requiredPsi = _data["requiredPsi"];
            this.pieceType = _data["pieceType"];
            this.castDate = _data["castDate"] ? new Date(_data["castDate"].toString()) : undefined as any;
            this.castTime = _data["castTime"];
            if (Array.isArray(_data["testCylinders"])) {
                this.testCylinders = [] as any;
                for (let item of _data["testCylinders"])
                    this.testCylinders!.push(TestCylinderBreakDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetTestSetDayDetailsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetTestSetDayDetailsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["testSetDayId"] = this.testSetDayId;
        data["dayNum"] = this.dayNum;
        data["comments"] = this.comments;
        data["dateDue"] = this.dateDue ? this.dateDue.toISOString() : undefined as any;
        data["dateTested"] = this.dateTested ? this.dateTested.toISOString() : undefined as any;
        data["jobCode"] = this.jobCode;
        data["jobName"] = this.jobName;
        data["mixDesignCode"] = this.mixDesignCode;
        data["requiredPsi"] = this.requiredPsi;
        data["pieceType"] = this.pieceType;
        data["castDate"] = this.castDate ? this.castDate.toISOString() : undefined as any;
        data["castTime"] = this.castTime;
        if (Array.isArray(this.testCylinders)) {
            data["testCylinders"] = [];
            for (let item of this.testCylinders)
                data["testCylinders"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IGetTestSetDayDetailsResponse {
    testSetDayId?: number;
    dayNum?: number;
    comments?: string | undefined;
    dateDue?: Date;
    dateTested?: Date | undefined;
    jobCode?: string | undefined;
    jobName?: string | undefined;
    mixDesignCode?: string | undefined;
    requiredPsi?: number;
    pieceType?: string | undefined;
    castDate?: Date;
    castTime?: string | undefined;
    testCylinders?: TestCylinderBreakDto[] | undefined;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export class SaveTestSetDayDataRequest implements ISaveTestSetDayDataRequest {
    testSetDayId?: number;
    dateTested?: Date;
    comments?: string | undefined;
    cylinderBreaks?: TestCylinderBreakInput[] | undefined;

    constructor(data?: ISaveTestSetDayDataRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.testSetDayId = _data["testSetDayId"];
            this.dateTested = _data["dateTested"] ? new Date(_data["dateTested"].toString()) : undefined as any;
            this.comments = _data["comments"];
            if (Array.isArray(_data["cylinderBreaks"])) {
                this.cylinderBreaks = [] as any;
                for (let item of _data["cylinderBreaks"])
                    this.cylinderBreaks!.push(TestCylinderBreakInput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SaveTestSetDayDataRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SaveTestSetDayDataRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["testSetDayId"] = this.testSetDayId;
        data["dateTested"] = this.dateTested ? this.dateTested.toISOString() : undefined as any;
        data["comments"] = this.comments;
        if (Array.isArray(this.cylinderBreaks)) {
            data["cylinderBreaks"] = [];
            for (let item of this.cylinderBreaks)
                data["cylinderBreaks"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ISaveTestSetDayDataRequest {
    testSetDayId?: number;
    dateTested?: Date;
    comments?: string | undefined;
    cylinderBreaks?: TestCylinderBreakInput[] | undefined;
}

export class TestCylinderBreakDto implements ITestCylinderBreakDto {
    testCylinderId?: number;
    code?: string | undefined;
    breakPsi?: number | undefined;

    constructor(data?: ITestCylinderBreakDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.testCylinderId = _data["testCylinderId"];
            this.code = _data["code"];
            this.breakPsi = _data["breakPsi"];
        }
    }

    static fromJS(data: any): TestCylinderBreakDto {
        data = typeof data === 'object' ? data : {};
        let result = new TestCylinderBreakDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["testCylinderId"] = this.testCylinderId;
        data["code"] = this.code;
        data["breakPsi"] = this.breakPsi;
        return data;
    }
}

export interface ITestCylinderBreakDto {
    testCylinderId?: number;
    code?: string | undefined;
    breakPsi?: number | undefined;
}

export class TestCylinderBreakInput implements ITestCylinderBreakInput {
    testCylinderId?: number;
    breakPsi?: number;

    constructor(data?: ITestCylinderBreakInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.testCylinderId = _data["testCylinderId"];
            this.breakPsi = _data["breakPsi"];
        }
    }

    static fromJS(data: any): TestCylinderBreakInput {
        data = typeof data === 'object' ? data : {};
        let result = new TestCylinderBreakInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["testCylinderId"] = this.testCylinderId;
        data["breakPsi"] = this.breakPsi;
        return data;
    }
}

export interface ITestCylinderBreakInput {
    testCylinderId?: number;
    breakPsi?: number;
}

export class TestCylinderQueueResponse implements ITestCylinderQueueResponse {
    testCylinderCode?: string | undefined;
    ovenId?: string | undefined;
    dayNum?: number;
    castDate?: Date;
    castTime?: string | undefined;
    jobCode?: string | undefined;
    jobName?: string | undefined;
    mixDesignCode?: string | undefined;
    requiredPsi?: number;
    pieceType?: string | undefined;
    testSetId?: number;
    testSetDayId?: number;
    dateDue?: Date;
    dateTested?: Date | undefined;

    constructor(data?: ITestCylinderQueueResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.testCylinderCode = _data["testCylinderCode"];
            this.ovenId = _data["ovenId"];
            this.dayNum = _data["dayNum"];
            this.castDate = _data["castDate"] ? new Date(_data["castDate"].toString()) : undefined as any;
            this.castTime = _data["castTime"];
            this.jobCode = _data["jobCode"];
            this.jobName = _data["jobName"];
            this.mixDesignCode = _data["mixDesignCode"];
            this.requiredPsi = _data["requiredPsi"];
            this.pieceType = _data["pieceType"];
            this.testSetId = _data["testSetId"];
            this.testSetDayId = _data["testSetDayId"];
            this.dateDue = _data["dateDue"] ? new Date(_data["dateDue"].toString()) : undefined as any;
            this.dateTested = _data["dateTested"] ? new Date(_data["dateTested"].toString()) : undefined as any;
        }
    }

    static fromJS(data: any): TestCylinderQueueResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TestCylinderQueueResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["testCylinderCode"] = this.testCylinderCode;
        data["ovenId"] = this.ovenId;
        data["dayNum"] = this.dayNum;
        data["castDate"] = this.castDate ? this.castDate.toISOString() : undefined as any;
        data["castTime"] = this.castTime;
        data["jobCode"] = this.jobCode;
        data["jobName"] = this.jobName;
        data["mixDesignCode"] = this.mixDesignCode;
        data["requiredPsi"] = this.requiredPsi;
        data["pieceType"] = this.pieceType;
        data["testSetId"] = this.testSetId;
        data["testSetDayId"] = this.testSetDayId;
        data["dateDue"] = this.dateDue ? this.dateDue.toISOString() : undefined as any;
        data["dateTested"] = this.dateTested ? this.dateTested.toISOString() : undefined as any;
        return data;
    }
}

export interface ITestCylinderQueueResponse {
    testCylinderCode?: string | undefined;
    ovenId?: string | undefined;
    dayNum?: number;
    castDate?: Date;
    castTime?: string | undefined;
    jobCode?: string | undefined;
    jobName?: string | undefined;
    mixDesignCode?: string | undefined;
    requiredPsi?: number;
    pieceType?: string | undefined;
    testSetId?: number;
    testSetDayId?: number;
    dateDue?: Date;
    dateTested?: Date | undefined;
}

export class UntestedPlacementResponse implements IUntestedPlacementResponse {
    pourId?: number;
    placementId?: number;
    castDate?: Date;
    castTime?: string | undefined;
    jobCode?: string | undefined;
    jobName?: string | undefined;
    mixDesignCode?: string | undefined;
    pieceType?: string | undefined;
    volume?: number;

    constructor(data?: IUntestedPlacementResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pourId = _data["pourId"];
            this.placementId = _data["placementId"];
            this.castDate = _data["castDate"] ? new Date(_data["castDate"].toString()) : undefined as any;
            this.castTime = _data["castTime"];
            this.jobCode = _data["jobCode"];
            this.jobName = _data["jobName"];
            this.mixDesignCode = _data["mixDesignCode"];
            this.pieceType = _data["pieceType"];
            this.volume = _data["volume"];
        }
    }

    static fromJS(data: any): UntestedPlacementResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UntestedPlacementResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pourId"] = this.pourId;
        data["placementId"] = this.placementId;
        data["castDate"] = this.castDate ? this.castDate.toISOString() : undefined as any;
        data["castTime"] = this.castTime;
        data["jobCode"] = this.jobCode;
        data["jobName"] = this.jobName;
        data["mixDesignCode"] = this.mixDesignCode;
        data["pieceType"] = this.pieceType;
        data["volume"] = this.volume;
        return data;
    }
}

export interface IUntestedPlacementResponse {
    pourId?: number;
    placementId?: number;
    castDate?: Date;
    castTime?: string | undefined;
    jobCode?: string | undefined;
    jobName?: string | undefined;
    mixDesignCode?: string | undefined;
    pieceType?: string | undefined;
    volume?: number;
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}